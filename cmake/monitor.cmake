# monitoring.cmake - Handles binary conversion of monitoring files
message(STATUS "Building monitor")

set(MONITOR_SOURCE_DIR "${CMAKE_SOURCE_DIR}/monitoring")
set(MONITOR_OUTPUT_DIR "${CMAKE_BINARY_DIR}/monitoring")
file(MAKE_DIRECTORY ${MONITOR_OUTPUT_DIR})

file(GLOB ALL_MONITOR_FILES "${MONITOR_SOURCE_DIR}/*")

set(GENERATED_HEADER "${MONITOR_OUTPUT_DIR}/binary_config.h")

file(WRITE ${GENERATED_HEADER} "// binary_config.h - Auto-generated by Cmake\n\n#pragma once\n\n")

foreach(FILE ${ALL_MONITOR_FILES})
  get_filename_component(FILENAME ${FILE} NAME)

  string(REPLACE "-" "_" SANITIZED_FILENAME "${FILENAME}")
  string(REPLACE "." "_" OUTPUT_VAR_NAME "${SANITIZED_FILENAME}")

  set(OUTPUT_BIN_FILE "${MONITOR_OUTPUT_DIR}/${OUTPUT_VAR_NAME}.bin")

  message(STATUS "Processing : ${FILENAME} -> ${OUTPUT_BIN_FILE}")

  add_custom_command(
    OUTPUT ${OUTPUT_BIN_FILE}
    COMMAND xxd -i ${FILE} | 
            sed "s/unsigned char .*_${OUTPUT_VAR_NAME}/unsigned char ${OUTPUT_VAR_NAME}_data/g" | 
            sed "s/unsigned int .*_len/unsigned int ${OUTPUT_VAR_NAME}_data_len/g" > ${OUTPUT_BIN_FILE}
    DEPENDS ${FILE}
    COMMENT "Converting ${FILE} to binary format"
  )

  file(APPEND ${GENERATED_HEADER} "#include \"${OUTPUT_VAR_NAME}.bin\"\n")

  if(TARGET ${TNN_OUTPUT_NAME})
    target_sources(${TNN_OUTPUT_NAME} PRIVATE ${OUTPUT_BIN_FILE})
  else()
    message(FATAL_ERROR "Target '${TNN_OUTPUT_NAME}' not found.")
  endif()
endforeach()

file(APPEND ${GENERATED_HEADER} "\n#include <unordered_map>\n\n")
file(APPEND ${GENERATED_HEADER} "extern const std::unordered_map<std::string, std::pair<const unsigned char*, unsigned int>> file_map = {\n")

set(COUNTER 0)

foreach(FILE ${ALL_MONITOR_FILES})
  get_filename_component(FILENAME ${FILE} NAME)

  string(REPLACE "-" "_" SANITIZED_FILENAME "${FILENAME}")
  string(REPLACE "." "_" OUTPUT_VAR_NAME "${SANITIZED_FILENAME}")

  if(${COUNTER} GREATER 0)
    file(APPEND ${GENERATED_HEADER} ",\n")
  endif()

  file(APPEND ${GENERATED_HEADER} "    {\"/${FILENAME}\", {${OUTPUT_VAR_NAME}_data, ${OUTPUT_VAR_NAME}_data_len}}")

  math(EXPR COUNTER "${COUNTER} + 1")
endforeach()

file(APPEND ${GENERATED_HEADER} "\n};\n")

include_directories(${MONITOR_OUTPUT_DIR})
